using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using Fall2024_Assignment3_gdprasad.Data;
using Fall2024_Assignment3_gdprasad.Models;
using Azure.AI.OpenAI;
using OpenAI.Chat;
using VaderSharp2;
using System.ClientModel;

/*
Pages that can index, view, create, edit, and delete actors with:
Name
Gender
Age
IMDB Hyperlink
PhotoLink of the actor
A section of the details page that calls the AI and sentiment analysis APIs with:
A list of movies with the actor
    A table containing two columns:
        Twenty tweets generated from the "Twitter" API generated by AI relating to the selected actor
        The analyzed sentiment of the tweets
    A heading with the overall sentiment analysis about your chosen actor should be above the table
At least eight actors you have entered into the database
*/

namespace Fall2024_Assignment3_gdprasad.Controllers {

    public class ActorController : Controller {
        private readonly ApplicationDbContext _context;
        private readonly string ApiKey;
        private const string ApiEndpoint = "https://fall2024-gdprasad-openai.openai.azure.com/";
        private const string AiDeployment = "gpt-35-turbo";
        private readonly ApiKeyCredential ApiCredential;
        
        public ActorController(ApplicationDbContext context, IConfiguration configuration) {
            _context = context;
            ApiKey = configuration["OpenAI:ServiceApiKey"] ?? throw new ArgumentNullException("OpenAI:ServiceApiKey", "API key not found in configuration.");
            ApiCredential = new(ApiKey);
            _context = context;
        }

        public async Task<List<(string, double)>> GenerateTweets(string actorName) {
            Console.WriteLine("Asking Twitter...");
            var tweetsWithSentiment = new List<(string, double)>();
            ChatClient chatClient = new AzureOpenAIClient(new Uri(ApiEndpoint), ApiCredential).GetChatClient(AiDeployment);

            // List of 20 personalities to generate tweets from
            string[] personalities = ["The Critic", "The Fan", "The Cinephile", "The Skeptic", "The Optimist", "The Pessimist", "The Realist", "The Idealist", "The Cynic", "The Romantic", "The Nihilist", "The Absurdist", "The Surrealist", "The Existentialist", "The Stoic", "The Hedonist", "The Ascetic", "The Pragmatist", "The Materialist", "The Spiritualist"];
            var actorTweets = new List<string>();
            foreach (var personality in personalities) {
                var messages = new ChatMessage[] {
                    new SystemChatMessage($"Do not say you are an AI langauge model. You are taking on the role of a Twitter user who embodies the personality of {personality}. You are tweeting about {actorName}."),
                    new UserChatMessage($"How would you rate the acting performance of {actorName} out of 10 in 20 words or less?")
                };

                var chatCompletionOptions = new ChatCompletionOptions {
                    MaxOutputTokenCount = 400,
                };

                ClientResult<ChatCompletion> result = await chatClient.CompleteChatAsync(messages, chatCompletionOptions);

                actorTweets.Add(result.Value.Content[0].Text);
                Thread.Sleep(TimeSpan.FromSeconds(5));
            }

            //calculate the sentiment for each tweet
            var analyzer = new SentimentIntensityAnalyzer();
            foreach (var tweet in actorTweets) {
                tweetsWithSentiment.Add((tweet, analyzer.PolarityScores(tweet).Compound));
            }

            return tweetsWithSentiment;
        }

        // GET: Actor
        public async Task<IActionResult> Index() {
            return View(await _context.Actors.ToListAsync());
        }

        // GET: Actor/Details/5

        public async Task<IActionResult> Details(int? id) {
            if (id == null) {
                return NotFound();
            }

            var actor = await _context.Actors
                .Include(a => a.MovieActors)
                .ThenInclude(ma => ma.Movie)
                .FirstOrDefaultAsync(a => a.Id == id);

            if (actor == null) {
                return NotFound();
            }

            var actorTweetsSentiments = new List<(string, double)>();
            if (!string.IsNullOrEmpty(actor.Name)) {
                actorTweetsSentiments = await GenerateTweets(actor.Name);
            }

            var overallSentiment = actorTweetsSentiments.Select(r => r.Item2).Average();

            var viewActorModel = new ActorDetailsViewModel(actor, actor.MovieActors.Select(ma => ma.Movie).ToList(), actorTweetsSentiments, overallSentiment);
            return View(viewActorModel);
        }

        // GET: Actor/Create
        public IActionResult Create() {
            return View();
        }

        // POST: Actor/Create
        [HttpPost]
        [ValidateAntiForgeryToken]
        // PhotoLink link is a url to the PhotoLink of the actor
        public async Task<IActionResult> Create([Bind("Id,Name,Gender,Age,ImdbLink,PhotoLink")] Actor actor) {
            if (ModelState.IsValid) {
                _context.Add(actor);
                await _context.SaveChangesAsync();
                return RedirectToAction(nameof(Index));
            }
            return View(actor);
        }

        // GET: Actor/Edit/5
        public async Task<IActionResult> Edit(int? id) {
            if (id == null) {
                return NotFound();
            }
            var actor = await _context.Actors.FindAsync(id);
            if (actor == null) {
                return NotFound();
            }
            return View(actor);
        }

        // POST: Actor/Edit/5
        [HttpPost]
        [ValidateAntiForgeryToken]
        public async Task<IActionResult> Edit(int id, [Bind("Id, Name, Gender, Age, ImdbLink, PhotoLink")] Actor actor) {
            if (id != actor.Id) {
                return NotFound();
            }
            if (ModelState.IsValid) {
                try {
                    _context.Update(actor);
                    await _context.SaveChangesAsync();
                } catch (DbUpdateConcurrencyException) {
                    if (!ActorExists(actor.Id)) {
                        return NotFound();
                    } else {
                        throw;
                    }
                }
                return RedirectToAction(nameof(Index));
            }
            return View(actor);
        }

        // GET: Actor/Delete/5
        public async Task<IActionResult> Delete(int? id) {
            if (id == null) {
                return NotFound();
            }
            var actor = await _context.Actors
                .FirstOrDefaultAsync(m => m.Id == id);
            if (actor == null) {
                return NotFound();
            }
            return View(actor);
        }

        // POST: Actor/Delete/5
        [HttpPost, ActionName("Delete")]
        [ValidateAntiForgeryToken]
        public async Task<IActionResult> DeleteConfirmed(int id) {
            var actor = await _context.Actors.FindAsync(id);
            if (actor != null) {
                _context.Actors.Remove(actor);
                await _context.SaveChangesAsync();
                return RedirectToAction(nameof(Index));
            } else {
                return NotFound();
            }
        }

        private bool ActorExists(int id) {
            return _context.Actors.Any(e => e.Id == id);
        }
    }
}